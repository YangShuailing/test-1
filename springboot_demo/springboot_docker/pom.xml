<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.johnny</groupId>
        <artifactId>springboot_demo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <!--for linux env run mvn clean install command-->
    <!--<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.4.RELEASE</version>
    </parent>-->

    <artifactId>springboot_docker</artifactId>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <image.name>johnny-docker-demo:${demo.image.tag}</image.name>
        <full.image.name>${hpe.docker.hub.repository}/${hpe.docker.hub.repository.org}/${image.name}</full.image.name>
        <save.images.tar.directory>/var/opt/kubernetes/offline/suite_images</save.images.tar.directory>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <profiles>
        <!-- Docker Build Profile -->
        <profile>
            <id>docker-build</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <build.publish>false</build.publish>
                <!-- Developer Registry -->
                <hpe.docker.hub.repository>hub.docker.hpecorp.net</hpe.docker.hub.repository>
                <hpe.docker.hub.repository.org>shared</hpe.docker.hub.repository.org>
                <demo.image.tag>1.0</demo.image.tag>
                <http.proxy>http://web-proxy.sgp.hpecorp.net:8088</http.proxy>
                <https.proxy>https://web-proxy.sgp.hpecorp.net:8088</https.proxy>
            </properties>
        </profile>

        <!-- Docker Save Profile -->
        <profile>
            <id>docker-save</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>docker-save</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <arguments>
                                        <argument>save</argument>
                                        <argument>--output</argument>
                                        <argument>
                                            ${save.images.tar.directory}/${hpe.docker.hub.repository.org}-${image.name}-${demo.image.tag}.tar
                                        </argument>
                                        <argument>${full.image.name}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>docker</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>target</directory>
                                    <includes>
                                        <include>*.jar</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <imageName>${full.image.name}</imageName>
                            <!-- optionally overwrite tags every time image is built with docker:build -->
                            <forceTags>true</forceTags>
                            <dockerDirectory>${project.basedir}/docker</dockerDirectory>
                            <resources>
                                <resource>
                                    <targetPath>/</targetPath>
                                    <directory>${project.build.directory}</directory>
                                    <include>${project.build.finalName}.jar</include>
                                </resource>
                            </resources>
                            <buildArgs>
                                <HTTP_PROXY>${http.proxy}</HTTP_PROXY>
                                <HTTPS_PROXY>${https.proxy}</HTTPS_PROXY>
                            </buildArgs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>